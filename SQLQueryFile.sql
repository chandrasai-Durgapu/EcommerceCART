

/**--1. top selling products 
--query top 10 products by total sales value

--first need to find total quantity sold and total sales value
**/

select top 10 oi.product_id, p.product_name, sum(oi.total_price) as total_sale, count(o.order_id) as total_orders
from orders o join order_items oi on oi.order_id=o.order_id
join products as p on p.product_id = oi.product_id
group by oi.product_id, p.product_name
order by total_sale desc 


/**--2. revenue by category
--Calculate total revenue generated by each product category.

---need to find percentage contribution of each category to total revenue
---i got error:---  arthmetic error so convert to bigint and add sum function and cast as decimal and apply percentage to it
**/
SELECT 
    p.category_id,
    c.category_name,
    SUM(CAST(oi.total_price AS BIGINT)) AS total_sale,
    CAST(SUM(CAST(oi.total_price AS BIGINT)) AS DECIMAL(38,2)) /
    CAST((SELECT SUM(CAST(total_price AS BIGINT)) FROM order_items) AS DECIMAL(38,2)) * 100 AS ratio
FROM order_items oi
JOIN products AS p ON p.product_id = oi.product_id
LEFT JOIN categories AS c ON c.category_id = p.category_id
GROUP BY p.category_id, c.category_name
ORDER BY total_sale DESC;


/**--3. Average Order value
--computet the average order value for each customer

--include only customers with more than 2 orders
**/
select c.customer_id,
		c.first_name +''+ c.last_name as full_name,
		sum(total_price) /count(o.order_id)  as AVG_value,
		count(o.order_id) as total_orders
from orders as o join customers as c
on c.customer_id=o.customer_id
join order_items as oi on oi.order_id=o.order_id
group by c.customer_id, c.first_name +''+ c.last_name
having count(o.order_id) > 2


/**--4. Monthly sales trend
--querymonthly total sales over the past time

--select last one year data and select their total sales and their previous month sales by using lag() function
--convert total sales as big-int to avoid below error
--i got error:-- Arithmetic overflow error converting expression to data type int.
**/

SELECT 
    year,
    month,
    total_sales AS current_month_sale,
    LAG(total_sales, 1) OVER (ORDER BY year, month) AS last_month_sale
FROM (
    SELECT 
        YEAR(o.order_date) AS year,
        MONTH(o.order_date) AS month,
        SUM(CAST(oi.total_price AS BIGINT)) AS total_sales
    FROM orders AS o
    JOIN order_items AS oi ON o.order_id = oi.order_id 
    WHERE o.order_date >= DATEADD(YEAR, -1, GETDATE())
    GROUP BY 
        YEAR(o.order_date),
        MONTH(o.order_date)
) AS monthly_sales
ORDER BY year, month;


/**--5. Customers with no purchase
--find the customers who have registered but never placed an order
**/

/**--approach-1   list the customers details and the time since their registration
**/
select * from customers
where customer_id not in (
select distinct(customer_id) from orders
)

/**--another approach-2
--select * from customers as c left join orders as o on c.customer_id=o.customer_id 
--where o.customer_id is null
**/

/**--6. Least selling category by state

--Identify the best selling product category fro each state
--include total sales for that category within each state
**/
with ranking_content as(
select c.state,
ct.category_name,
sum(oi.total_price) as total_sales,
rank() over(partition by ct.category_name order by sum(oi.total_price) desc) as rank
from orders as o join customers as c on c.customer_id=o.customer_id
join order_items as oi on oi.order_id=o.order_id
join products as p on p.product_id=o.product_id
join categories as ct on ct.category_id=p.category_id
group by c.state, ct.category_name
--order by ct.category_name, sum(oi.total_price) 

)

select * from ranking_content where rank=1


/**7. customer life time value
--Calculate total value of orders placed by each customer over their lifetime

--rank customers based on customer lifetime value
**/

select c.customer_id,
c.first_name + '' + c.last_name as full_name,
sum(oi.total_price) as CLTV,
DENSE_RANK() over(order by sum(oi.total_price)) as cx_ranking
from orders as o join customers as c on o.customer_id=c.customer_id
join order_items as oi on oi.order_id=o.order_id
group by c.customer_id, c.first_name + '' + c.last_name


/** --8. Inventory stock Alerts
Query products with stock levels below a certain threshold (e.g less than 10 units).

--Include last restock_date and warehouse information.
**/


select  i.inventory_id,
		i.stock_remaining as current_stock_left,
		product_name ,
		i.restock_date as last_stock_date
		from inventory as i
join products as p on p.product_id=i.product_id
where stock_remaining < 10


/** Shipping delays 
Identify orders where the shipping date is later than 7 days or 5 days after the order date

--include customer, order details and delivery provider
**/

-- Shipping delays: orders shipped more than 5 days or 7 days after being placed

SELECT 
    o.order_id,
    o.order_date,
    s.shipping_date,
    DATEDIFF(DAY, o.order_date, s.shipping_date) AS days_to_ship,
    o.customer_id,
    c.first_name,
    c.last_name,
	s.delivery_status
FROM orders AS o
JOIN customers AS c ON o.customer_id = c.customer_id
JOIN shipping AS s ON o.order_id = s.order_id
WHERE DATEDIFF(DAY, o.order_date, s.shipping_date) > 5 OR DATEDIFF(DAY, o.order_date, s.shipping_date) > 7


/** Payment success rate 
--calculate the percentage of successful payments across all orders

--include breakdowns by payment status(eg:-- failed pending)
**/

select p.payment_status,
count(*) as total_count ,
count(*)/(select count(*) from payments) * 100 as ratio
from orders as o join payments as p 
on p.order_id=o.order_id
group by p.payment_status



